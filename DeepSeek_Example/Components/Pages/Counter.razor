@page "/counter"
@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        Prawie jak czatGBT
    </div>
    <chat-container class="card-body">
        <chat-messages-container id="messegesContainer" class="border-bottom border-2">
            @foreach (var item in Messages.Where(n => n.messege.Role == ChatRole.User || n.messege.Role == ChatRole.Assistant))
            {
                <div class="d-flex @item.classJustify">
                    <chat-message class="alert @item.classAlert m-2 p-1">
                        @((MarkupString)item.messege.Text)
                    </chat-message>
                </div>
            }
        </chat-messages-container>
        <div class="d-flex gap-2">
            <input type="text" class="form-control" @oninput="HandleInput" @onkeydown="HandleKeyDown" @bind="Message" style="flex:1 1 200px" />
            <button class="btn btn-primary" @onclick="SendMessage">Skończylem</button>
        </div>
    </chat-container>
</div>

@code {
    List<(ChatMessage messege, string classJustify, string classAlert)> Messages { get; set; } = [GetMessageAndClass(new(ChatRole.System, "Odpowiadaj na moje pytanie tylko i wyłącnie w języku polskim"))];
    [Inject] IChatClient ChatClient { get; set; } = default!;
    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
    string Message { get; set; } = string.Empty;
    SemaphoreSlim semaphore = new SemaphoreSlim(1);

    private async Task SendMessage()
    {
        await semaphore.WaitAsync();
        try
        {
            if (!string.IsNullOrWhiteSpace(Message))
            {
                var myMessege = GetMessageAndClass(new ChatMessage { Text = Message, Role = ChatRole.User });
                var responeMessage = GetMessageAndClass(new ChatMessage { Text = "", Role = ChatRole.Assistant });
                Message = string.Empty;
                Messages.AddRange([myMessege, responeMessage]);
                await foreach (var item in ChatClient.CompleteStreamingAsync(Messages.Select(n => n.messege).ToList()))
                {
                    responeMessage.messege.Text += item.Text;
                    await InvokeAsync(StateHasChanged);
                }
                await JSRuntime.InvokeVoidAsync("scrollToBottom", "messegesContainer");
            }
        }
        finally
        {
            semaphore.Release();
        }
    }
    public void HandleInput(ChangeEventArgs e)
    {
        Message = e.Value?.ToString() ?? "";
    }
    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") await SendMessage();
    }
    private static (ChatMessage messege, string classJustify, string classAlert) GetMessageAndClass(ChatMessage message)
    {
        return (message, message.Role == ChatRole.User ? "justify-content-end" : "justify-content-start", message.Role == ChatRole.User ? "alert-info" : "alert-primary");
    }
}
