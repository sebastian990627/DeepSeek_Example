@page "/image-editor-advanced"
@inject IJSRuntime JS
@implements IDisposable
@rendermode InteractiveServer

<div class="card">
    <div class="card-header">
        <div class="btn-toolbar gap-2" role="toolbar">
            <div class="btn-group gap-1 btn-group-sm" role="group">
                <button class="btn btn-secondary @(IsDrawingModeEnabled ?"disabled" : "")" @onclick="CropImage">@(IsCroppingEnabled ? "Przytnij" : "Przycinanie")</button>
                <button class="btn btn-secondary btn-sm" @onclick="ClearCanvas">Wyczyść</button>
                <button class="btn btn-secondary btn-sm" @onclick="SaveImage">Zapisz obraz</button>
            </div>

            @if (IsObjectSelected)
            {
                <button class="btn btn-danger btn-sm" @onclick="RemoveSelectedObject">Usuń zaznaczone</button>
            }
            <button class="btn btn-secondary btn-sm @(IsDrawingModeEnabled || IsCroppingEnabled ? "disabled" : "")" type="button" @onclick="AddCustomText">Dodaj tekst</button>

            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle btn-sm @(IsCroppingEnabled?"disabled":"")" type="button" id="propertiesDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Właściwości
                </button>
                <div class="dropdown-menu p-3" aria-labelledby="propertiesDropdown">
                    <div class="mb-2">
                        <label for="lineColor" class="form-label">Kolor</label>
                        <input type="color" class="form-control" id="lineColor" @bind="LineColor" @oninput="SetDrawingOptions" />
                    </div>
                    <div>
                        <label for="lineWidth" class="form-label">Grubość</label>
                        <input type="number" class="form-control" id="lineWidth" @bind="LineWidth" min="1" max="20" @oninput="SetDrawingOptions" />
                    </div>
                    <div class="mt-2">
                        <button class="btn btn-secondary btn-sm" type="button" @onclick="SetDrawingOptions">Ustaw</button>
                    </div>
                </div>
            </div>

            <div class="btn-group btn-group-sm" role="group">
                @if (IsDrawingModeEnabled)
                {
                    <button class="btn btn-secondary" @onclick="DisableDrawing">Wyłącz rysowanie</button>
                }
                else
                {
                    <button class="btn btn-secondary @(IsCroppingEnabled?"disabled":"")" @onclick="EnableDrawing">Włącz rysowanie</button>
                }
            </div>

            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle btn-sm @(IsDrawingModeEnabled || IsCroppingEnabled ? "disabled" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Wstaw
                </button>
                <ul class="dropdown-menu">
                    <li>
                        <a class="dropdown-item" @onclick="DrawRectangle">Prostokąt</a>
                    </li>
                    <li>
                        <a class="dropdown-item" @onclick="DrawCircle">Okrąg</a>
                    </li>
                    <li>
                        <a class="dropdown-item" @onclick="DrawLine">Linia</a>
                    </li>
                    <li>
                        <a class="dropdown-item" @onclick="DrawArrow">Strzałka</a>
                    </li>
                </ul>
            </div>

        </div>
    </div>
    <div class="card-body">
        <div id="canvasContainer" class="border" style="width: 100%; max-width: 100%; justify-items:center">
            <canvas id="imageCanvas" style="width: 100%;"></canvas>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ImagePath { get; set; } = "Zrzut ekranu 2025-02-05 203728.png"; // Upewnij się, że obraz jest w wwwroot/images

    private string UserText { get; set; } = "Przykładowy tekst";
    private string LineColor { get; set; } = "#000000";
    private int LineWidth { get; set; } = 3;

    // Flagi statusu
    private bool IsObjectSelected { get; set; } = false;
    private bool IsDrawingModeEnabled { get; set; } = false;
    private bool IsCroppingEnabled { get; set; } = false;

    private DotNetObjectReference<ImageEditor_Advanced>? _dotNetRef;

    private async Task AddCustomText()
    {
        await JS.InvokeVoidAsync("fabricEditor.addCustomText", UserText);
    }

    private async Task SetDrawingOptions()
    {
        await JS.InvokeVoidAsync("fabricEditor.setDrawingOptions", LineColor, LineWidth);
    }

    private async Task EnableDrawing()
    {
        await JS.InvokeVoidAsync("fabricEditor.enableDrawingMode");
    }

    private async Task DisableDrawing()
    {
        await JS.InvokeVoidAsync("fabricEditor.disableDrawingMode");
    }

    private async Task DrawRectangle()
    {
        await JS.InvokeVoidAsync("fabricEditor.drawRectangle");
    }

    private async Task DrawCircle()
    {
        await JS.InvokeVoidAsync("fabricEditor.drawCircle");
    }

    private async Task DrawLine()
    {
        await JS.InvokeVoidAsync("fabricEditor.drawLine");
    }

    private async Task DrawArrow()
    {
        await JS.InvokeVoidAsync("fabricEditor.drawArrow");
    }

    private async Task CropImage()
    {
        var result = await JS.InvokeAsync<string>("fabricEditor.cropImage");
        if (result == "done")
        {
            Console.WriteLine("Obraz został przycięty i zaktualizowany.");
        }
    }

    private async Task ClearCanvas()
    {
        await JS.InvokeVoidAsync("fabricEditor.clearCanvas");
    }

    private async Task SaveImage()
    {
        var editedImage = await JS.InvokeAsync<string>("fabricEditor.getEditedImage");
        if (!string.IsNullOrEmpty(editedImage))
        {
            Console.WriteLine($"Zapisany obraz: {editedImage.Length} bajtów.");
            await SaveEditedImage(editedImage);
        }
    }

    private async Task SaveEditedImage(string base64Image)
    {
        var imageBytes = Convert.FromBase64String(base64Image.Split(',')[1]);
        var imagePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "edited.png");
        await System.IO.File.WriteAllBytesAsync(imagePath, imageBytes);
    }

    private async Task ZoomIn()
    {
        await JS.InvokeVoidAsync("fabricEditor.zoomIn");
    }

    private async Task ZoomOut()
    {
        await JS.InvokeVoidAsync("fabricEditor.zoomOut");
    }

    private async Task RemoveSelectedObject()
    {
        await JS.InvokeVoidAsync("fabricEditor.removeSelectedObject");
    }

    // Metoda wywoływana z JavaScript (JSInvokable) – aktualizuje flagi w C#
    [JSInvokable]
    public void UpdateStatus(bool isDrawingMode, bool isObjectSelected, bool isCropping)
    {
        IsDrawingModeEnabled = isDrawingMode;
        IsObjectSelected = isObjectSelected;
        IsCroppingEnabled = isCropping;
        InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("fabricEditor.initialize", "imageCanvas", ImagePath, _dotNetRef);
        }
    }

    public void Dispose()
    {
        _dotNetRef?.Dispose();
    }
}
